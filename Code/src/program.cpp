/// @file

#include "program.hpp"

#define X_MIN           -1.0f
#define Y_MIN           -1.0f
#define SIZE_X          100
#define SIZE_Y          100
#define NUM_POINTS      SIZE_X*SIZE_Y
#define DX              0.02f
#define DY              0.02f
#define DT              0.005

float4* position_old      = new float4(NUM_POINTS);                             // Old position.
float4* velocity_old      = new float4(NUM_POINTS);                             // Old velocity.
float4* acceleration_old  = new float4(NUM_POINTS);                             // Old acceleration.

point4* position          = new point4(NUM_POINTS);                             // Position.
float4* velocity          = new float4(NUM_POINTS);                             // Velocity.
float4* acceleration      = new float4(NUM_POINTS);                             // Acceleration.

float4* gravity           = new float4(NUM_POINTS);                             // Gravity.
float4* stiffness         = new float4(NUM_POINTS);                             // Stiffness.
float4* resting           = new float4(NUM_POINTS);                             // Resting.
float4* friction          = new float4(NUM_POINTS);                             // Friction.
float4* mass              = new float4(NUM_POINTS);                             // Mass.

int* index_PC             = new int(NUM_POINTS);                                // Centre particle.
int* index_PR             = new int(NUM_POINTS);                                // Right particle.
int* index_PU             = new int(NUM_POINTS);                                // Up particle.
int* index_PL             = new int(NUM_POINTS);                                // Left particle.
int* index_PD             = new int(NUM_POINTS);                                // Down particle.

color4* color             = new color4(NUM_POINTS);                             // Particle color.

text4*  text              = new text4("neutrino!", 1.0f, 1.0f, 1.0f, 1.0f);

float* dt                 = new float(1);
float tick;

void setup()
{
  int i;
  int j;
  float x;
  float y;

  dt[0] = DT;

  ////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////// Preparing arrays... /////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////
  y = Y_MIN;

  for (j = 0; j < SIZE_Y; j++)
  {
    x = X_MIN;

    for (i = 0; i < SIZE_X; i++)
    {
      position_old->x[i + SIZE_X*j] = x;                                        // Setting "x" initial position_old...
      position_old->y[i + SIZE_X*j] = y;                                        // Setting "y" initial position_old...
      position_old->z[i + SIZE_X*j] = 0.0f;                                     // Setting "z" initial position_old...
      position_old->w[i + SIZE_X*j] = 1.0f;                                     // Setting "w" initial position_old...

      // Setting "x" initial position (Taylor's expansion)...
      position->x[i + SIZE_X*j] = position_old->x[i + SIZE_X*j] +               // position_old +
                                  velocity_old->x[i + SIZE_X*j]*DT +            // velocity_old*dt +
                                  0.5*acceleration_old->x[i + SIZE_X*j]*DT*DT;  // 1/2*acceleration_old*dt^2

      // Setting "y" initial position (Taylor's expansion)...
      position->y[i + SIZE_X*j] = position_old->y[i + SIZE_X*j] +               // position_old +
                                  velocity_old->y[i + SIZE_X*j]*DT +            // velocity_old*dt +
                                  0.5*acceleration_old->y[i + SIZE_X*j]*DT*DT;  // 1/2*acceleration_old*dt^2

      // Setting "z" initial position (Taylor's expansion)...
      position->z[i + SIZE_X*j] = position_old->z[i + SIZE_X*j] +               // position_old +
                                  velocity_old->z[i + SIZE_X*j]*DT +            // velocity_old*dt +
                                  0.5*acceleration_old->z[i + SIZE_X*j]*DT*DT;  // 1/2*acceleration_old*dt^2

      // Setting "w" initial position...
      position->w[i + SIZE_X*j] = 1.0;

      gravity->x[i + SIZE_X*j] = 0.0f;                                          // Setting "x" gravity...
      gravity->y[i + SIZE_X*j] = 0.0f;                                          // Setting "y" gravity...
      gravity->z[i + SIZE_X*j] = 9.81f;                                         // Setting "z" gravity...
      gravity->w[i + SIZE_X*j] = 1.0f;                                          // Setting "w" gravity...

      stiffness->x[i + SIZE_X*j] = 30.0f;                                       // Setting "x" stiffness...
      stiffness->y[i + SIZE_X*j] = 30.0f;                                       // Setting "y" stiffness...
      stiffness->z[i + SIZE_X*j] = 30.0f;                                       // Setting "z" stiffness...
      stiffness->w[i + SIZE_X*j] = 1.0f;                                        // Setting "w" stiffness...

      resting->x[i + SIZE_X*j] = DX;                                            // Setting "x" resting position...
      resting->y[i + SIZE_X*j] = DX;                                            // Setting "y" resting position...
      resting->z[i + SIZE_X*j] = DX;                                            // Setting "z" resting position...
      resting->w[i + SIZE_X*j] = 1.0f;                                          // Setting "w" resting position...

      friction->x[i + SIZE_X*j] = 30.0f;                                        // Setting "x" friction...
      friction->y[i + SIZE_X*j] = 30.0f;                                        // Setting "y" friction...
      friction->z[i + SIZE_X*j] = 30.0f;                                        // Setting "z" friction...
      friction->w[i + SIZE_X*j] = 1.0f;                                         // Setting "w" friction...

      mass->x[i + SIZE_X*j] = 0.1f;                                             // Setting "x" mass...
      mass->y[i + SIZE_X*j] = 0.1f;                                             // Setting "y" mass...
      mass->z[i + SIZE_X*j] = 0.1f;                                             // Setting "z" mass...
      mass->w[i + SIZE_X*j] = 1.0f;                                             // Setting "w" mass...

      x += DX;
    }
    y += DY;
  }

  for (j = 1; j < (SIZE_X - 1); j++)
  {
    for (i = 1; j < (SIZE_X - 1); i++)
    {
      index_PC[i + SIZE_X*j] =  i       + SIZE_X*j;
      index_PR[i + SIZE_X*j] = (i + 1)  + SIZE_X*j;
      index_PU[i + SIZE_X*j] =  i       + SIZE_X*(j + 1);
      index_PL[i + SIZE_X*j] = (i - 1)  + SIZE_X*j;
      index_PD[i + SIZE_X*j] =  i       + SIZE_X*(j - 1);
    }
  }

  for (i = 0; i < color->size; i++)
  {
    color->r[i] = 1.0f;                                                         // Setting "x" initial color...
    color->g[i] = 0.0f;                                                         // Setting "y" initial color...
    color->b[i] = 0.0f;                                                         // Setting "z" initial color...
    color->a[i] = 1.0f;                                                         // Setting "w" initial color...
  }

  tick = 0.0f;                                                                  // Setting initial time tick...

  kernel_size(NUM_POINTS);
  kernel_dimensions(1);
  typeset(text);                                                                // Typesetting "text"...

  set_float4(position_old, 0);                                                  // Setting kernel argument #0...
  set_point4(position, 1);                                                      // Setting kernel argument #1...
  set_float4(velocity, 2);                                                      // Setting kernel argument #2...
  set_float4(acceleration, 3);                                                  // Setting kernel argument #3...
  set_float4(gravity, 4);                                                       // Setting kernel argument #4...
  set_float4(stiffness, 5);                                                     // Setting kernel argument #5...
  set_float4(resting, 6);                                                       // Setting kernel argument #6...
  set_float4(friction, 7);                                                      // Setting kernel argument #7...
  set_float4(mass, 8);                                                          // Setting kernel argument #8...
  set_int(index_PC, 9);                                                         // Setting kernel argument #9...
  set_int(index_PR, 10);                                                        // Setting kernel argument #10...
  set_int(index_PU, 11);                                                        // Setting kernel argument #11...
  set_int(index_PL, 12);                                                        // Setting kernel argument #12...
  set_int(index_PD, 13);                                                        // Setting kernel argument #13...
  set_float(dt, 14);                                                            // Setting kernel argument #14...
  set_color4(color, 15);                                                        // Setting kernel argument #15...
}

void loop()
{
  push_float4(&position_old->buffer, 0);                                        // Pushing kernel argument #0...
  push_point4(&position->buffer, 1);                                            // Pushing kernel argument #1...
  push_float4(&velocity->buffer, 2);                                            // Pushing kernel argument #2...
  push_float4(&acceleration->buffer, 3);                                        // Pushing kernel argument #3...
  push_float4(&gravity->buffer, 4);                                             // Pushing kernel argument #4...
  push_float4(&stiffness->buffer, 5);                                           // Pushing kernel argument #5...
  push_float4(&resting->buffer, 6);                                             // Pushing kernel argument #6...
  push_float4(&friction->buffer, 7);                                            // Pushing kernel argument #7...
  push_float4(&mass->buffer, 8);                                                // Pushing kernel argument #8...
  push_int(&index_PC->buffer, 9);                                               // Pushing kernel argument #9...
  push_int(&index_PR->buffer, 10);                                              // Pushing kernel argument #10...
  push_int(&index_PU->buffer, 11);                                              // Pushing kernel argument #11...
  push_int(&index_PL->buffer, 12);                                              // Pushing kernel argument #12...
  push_int(&index_PD->buffer, 13);                                              // Pushing kernel argument #13...
  push_float(&dt, 14);                                                          // Pushing kernel argument #14...
  push_color4(&color, 15);                                                      // Pushing kernel argument #15...

  execute_kernel();

  pop_float4(&position_old->buffer, 0);                                         // Pushing kernel argument #0...
  pop_point4(&position->buffer, 1);                                             // Pushing kernel argument #1...
  pop_float4(&velocity->buffer, 2);                                             // Pushing kernel argument #2...
  pop_float4(&acceleration->buffer, 3);                                         // Pushing kernel argument #3...
  pop_float4(&gravity->buffer, 4);                                              // Pushing kernel argument #4...
  pop_float4(&stiffness->buffer, 5);                                            // Pushing kernel argument #5...
  pop_float4(&resting->buffer, 6);                                              // Pushing kernel argument #6...
  pop_float4(&friction->buffer, 7);                                             // Pushing kernel argument #7...
  pop_float4(&mass->buffer, 8);                                                 // Pushing kernel argument #8...
  pop_int4(&index_PC->buffer, 9);                                               // Pushing kernel argument #9...
  pop_int4(&index_PR->buffer, 10);                                              // Pushing kernel argument #10...
  pop_int4(&index_PU->buffer, 11);                                              // Pushing kernel argument #11...
  pop_int4(&index_PL->buffer, 12);                                              // Pushing kernel argument #12...
  pop_int4(&index_PD->buffer, 13);                                              // Pushing kernel argument #13...
  pop_float(&dt, 14);                                                           // Pushing kernel argument #14...
  pop_color4(&color, 15);                                                       // Pushing kernel argument #15...

  tick += 0.1f;

  plot(points, colors, STYLE_POINT);
  print(text);
}

void terminate()
{
  delete points;
  delete colors;
  delete text;

  printf("All done!\n");
}
