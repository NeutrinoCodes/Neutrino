message("Checking cmake version...")                                                                # Printing message...
cmake_minimum_required(VERSION 3.0)                                                                 # Requiring cmake 3.0...

message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("################################ C/C++ COMPILER ################################")         # Printing message...
message("################################################################################")         # Printing message...
message("Setting project name...")                                                                  # Printing message...
project (nu)                                                                                        # Setting project name...
message("Project name = ${PROJECT_NAME}")                                                           # Printing message...
set(CMAKE_CXX_STANDARD 17)                                                                          # Setting C++17 standard...
set(CMAKE_CXX_STANDARD_REQUIRED ON)                                                                 #Â Setting complier standard requirement...
set(CMAKE_CXX_EXTENSIONS OFF)                                                                       # Disabling compiler-specific standards...
message("Setting build type...")                                                                    # Printing message...
set(CMAKE_BUILD_TYPE Release)                                                                       # Setting build type...
message("Build type = ${CMAKE_BUILD_TYPE}")                                                         # Printing message...

message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("####################################### OS #####################################")         # Printing message...
message("################################################################################")         # Printing message...
if(UNIX AND NOT APPLE)                                                                              
  set(LINUX TRUE)                                                                                   # Setting LINUX variable...
endif(UNIX AND NOT APPLE)

if(WIN32)
  string(REPLACE "\\" "/" GLAD_PATH "${GLAD_PATH}")                                                 # Adjusting backslashes...
  string(REPLACE "\\" "/" GLFW_PATH "${GLFW_PATH}")                                                 # Adjusting backslashes...
  string(REPLACE "\\" "/" GMSH_PATH "${GMSH_PATH}")                                                 # Adjusting backslashes...
  string(REPLACE "\\" "/" CL_PATH "${CL_PATH}")                                                     # Adjusting backslashes...
  string(REPLACE "\\" "/" IMGUI_PATH "${IMGUI_PATH}")                                               # Adjusting backslashes...
  string(REPLACE "\\" "/" IMPLOT_PATH "${IMPLOT_PATH}")                                             # Adjusting backslashes...
  string(REPLACE "\\" "/" NEUTRINO_PATH "${NEUTRINO_PATH}")                                         # Adjusting backslashes...
endif(WIN32)

message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("################################### NEUTRINO ###################################")         # Printing message...
message("################################################################################")         # Printing message...
message("Adding source files...")                                                                   # Printing message...
aux_source_directory(${CMAKE_HOME_DIRECTORY}/Code/src SRC_FILES)                                    # Getting all Neutrino source files...
set(SOURCES                                                                                         # Setting "SOURCES" variable...
  ${SRC_FILES}                                                                                      # All Neutrino source files.
  ${GLAD_PATH}/src/glad.c)                                                                          # "glad.c" source file.
set(IMGUI_SOURCES                                                                                   # All IMGUI source files.
  ${IMGUI_PATH}/imgui.cpp
  ${IMGUI_PATH}/imgui_demo.cpp
  ${IMGUI_PATH}/imgui_draw.cpp
  ${IMGUI_PATH}/backends/imgui_impl_glfw.cpp
  ${IMGUI_PATH}/backends/imgui_impl_opengl3.cpp
  ${IMGUI_PATH}/imgui_tables.cpp
  ${IMGUI_PATH}/imgui_widgets.cpp)
set(IMPLOT_SOURCES                                                                                  # All IMPLOT source files.
  ${IMPLOT_PATH}/implot.cpp
  ${IMPLOT_PATH}/implot_items.cpp)
message("Adding build target as library...")                                                        # Printing message...
add_library(${PROJECT_NAME} STATIC ${IMGUI_SOURCES} ${IMPLOT_SOURCES} ${SOURCES})                   # Adding build target as library...

message("Adding include files...")                                                                  # Printing message...
set(INCLUDES                                                                                        # Setting "INCLUDES" variable...
  ${CMAKE_HOME_DIRECTORY}/Code/include                                                              # Neutrino include directory.
  ${IMGUI_PATH}                                                                                     # IMGUI include directory.
  ${IMGUI_PATH}/backends                                                                            # IMGUI include backends directory.
  ${IMPLOT_PATH}                                                                                    # IMPLOT include directory.
  ${GLAD_PATH}/include                                                                              # GLAD include diretory.
  ${GLFW_PATH}/include                                                                              # GLFW include directory.
  ${GMSH_PATH}/include                                                                              # GMSH include directory.
  ${CL_PATH}/include)                                                                               # OpenCL include directory.
target_include_directories(${PROJECT_NAME} PRIVATE ${INCLUDES})                                     # Setting include directories...

message("Adding linked libraries...")                                                               # Printing message...

if(LINUX)                                                                                           # Detecting LINUX...
  target_link_libraries(                                                                            # Setting other linked libraries...
    ${PROJECT_NAME}                                                                                 # Project name.
    "-lOpenGL"                                                                                      # OpenGL library.
    "-lOpenCL"                                                                                      # OpenCL library.
    "-ldl"                                                                                          # "libdl" library.
    "-lglfw"                                                                                        # GLFW library.
    "-lm"                                                                                           # "math" library.
    "-lgmsh")                                                                                       # GMSH library.
endif(LINUX)

if(WIN32)                                                                                           # Detecting WINDOWS...
  target_link_libraries(                                                                            # Setting other linked libraries...
    ${PROJECT_NAME}                                                                                 # Project name.
    ${CL_PATH}/lib/x64/OpenCL.lib                                                                   # OpenCL library.
    ${GLFW_PATH}/lib-vc2019/glfw3.lib                                                               # GLFW library.
    ${GMSH_PATH}/lib/gmsh.lib)                                                                      # GMSH library.
endif(WIN32)

install(TARGETS ${PROJECT_NAME} DESTINATION ${NEUTRINO_PATH}/lib)                                   # Installing nu.lib in libnu\lib...
install(DIRECTORY ${CMAKE_HOME_DIRECTORY}/Code/include DESTINATION ${NEUTRINO_PATH})                # Installing all includes in libnu\include...

message("DONE!")                                                                                    # Printing message...

message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("#################################### DOXYGEN ###################################")         # Printing message...
message("################################################################################")         # Printing message...

message("Checking whether Doxygen is installed...")                                                 # Printing message...
find_package(Doxygen)                                                                               # Finding Doxygen...
if (DOXYGEN_FOUND)                                                                                  # Detecting Doxygen...
    message("Setting input and output files...")                                                    # Printing message...
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Docs/Doxyfile.in)                                    # Setting Doxygen input configuration file...
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)                                           # Setting Doxygen output folder...
    message("Requesting to configure the file... ${CMAKE_CURRENT_SOURCE_DIR}")                                                  # Printing message...
    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)                                              # Requesting to configure the files...
    message("DONE!")                                                                                # Printing message...
    add_custom_target(doc                                                                           # Adding "make doc" command...
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}                                                # Doxygen executable and output...
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}                                               # Working directory...
        COMMENT "Generating API documentation with Doxygen..."                                      # Comment...
        VERBATIM )                                                                                  # Escaping all commands properly for the build tool...
else (DOXYGEN_FOUND)                                                                                # If Doxygen not found:
  message("Doxygen need to be installed to generate the doxygen documentation!")                    # Printing message...
endif (DOXYGEN_FOUND)

message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("################################# INSTRUCTIONS #################################")         # Printing message...
message("################################################################################")         # Printing message...

message("Now go to the \"./cmake\" directory created by this command and do one (or more)")         # Printing message...
message("of the following things:")                                                                 # Printing message...
message("")                                                                                         # Printing message...
message("1. Type: \"make install\" in order to build and install the Neutrino library.")            # Printing message...
message("2. Type: \"make doc\" in order to build the Doxygen documentation of the project.")        # Printing message...
message("")                                                                                         # Printing message...
message("################################################################################")         # Printing message...
message("############################# CONFIGURATION REPORT #############################")         # Printing message...
message("################################################################################")         # Printing message...
